name: Security - Firestore Rules
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  rules:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install deps
        run: |
          if [ -f package.json ]; then npm ci || npm i; else echo "No package.json"; fi
      - name: Run Firestore rule tests
        run: npm run test:rules
  
  validate-rules:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate Firestore Rules
        run: |
          if [ -f "firestore.rules" ]; then
            echo "Firestore rules file found"
            # Add validation logic here if needed
          else
            echo "No firestore.rules file found"
            exit 1
          fi
      
      - name: Validate Storage Rules
        run: |
          if [ -f "storage.rules" ]; then
            echo "Storage rules file found"
            # Add validation logic here if needed
          else
            echo "No storage.rules file found"
            exit 1
          fi

  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Flutter dependencies
      run: |
        if [ -f "pubspec.yaml" ]; then
          echo "Checking Flutter dependencies for vulnerabilities"
          # flutter pub outdated would go here
        fi
    
    - name: Check Functions dependencies
      working-directory: functions
      run: |
        if [ -f "package.json" ]; then
          echo "Checking npm dependencies for vulnerabilities"
          npm audit --audit-level=moderate || true
        fi

  secret-scanning-reminder:
    name: Secret Scanning Reminder
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check GitHub Secret Scanning status
      run: |
        echo "=========================================="
        echo "üîê Secret Scanning Status"
        echo "=========================================="
        echo ""
        echo "‚ö†Ô∏è  REMINDER: Ensure GitHub Secret Scanning is enabled"
        echo ""
        echo "Repository settings: https://github.com/${{ github.repository }}/settings/security_analysis"
        echo ""
        echo "Required security features:"
        echo "  - ‚úÖ Secret scanning (detects committed secrets)"
        echo "  - ‚úÖ Push protection (blocks secret commits)"
        echo "  - ‚úÖ Dependency graph"
        echo "  - ‚úÖ Dependabot alerts"
        echo "  - ‚úÖ Dependabot security updates"
        echo ""
        echo "Secret types to monitor:"
        echo "  - Google API keys"
        echo "  - Google Cloud Platform service account keys"
        echo "  - Firebase service account keys"
        echo "  - Private keys"
        echo "  - OAuth tokens"
        echo ""
        echo "For more info: https://docs.github.com/en/code-security/secret-scanning"
        echo ""
    
    - name: Verify no secrets in environment files
      run: |
        echo "üîç Checking for committed .env files..."
        
        # Check for .env files (should be in .gitignore)
        if find . -name ".env" -o -name ".env.*" | grep -v ".env.example" | grep -v "node_modules" | grep -v ".git"; then
          echo "‚ùå WARNING: Found .env files in repository!"
          echo "These files may contain secrets and should not be committed."
          echo ""
          echo "Add to .gitignore:"
          echo "  .env"
          echo "  .env.*"
          echo "  !.env.example"
          exit 1
        else
          echo "‚úÖ No .env files found (good!)"
        fi
    
    - name: Check for API keys in code
      run: |
        echo "üîç Checking for hardcoded API keys..."
        
        # Basic pattern matching for common API key formats
        FOUND=0
        
        # Check for Firebase API keys in unexpected places
        if grep -r "AIza[0-9A-Za-z_-]{35}" --include="*.dart" --include="*.ts" --include="*.js" --include="*.sh" . 2>/dev/null | grep -v "NEXT_PUBLIC" | grep -v "// Example:" | grep -v ".git"; then
          echo "‚ö†Ô∏è  Found Firebase API key pattern in code!"
          FOUND=1
        fi
        
        if [ $FOUND -eq 1 ]; then
          echo ""
          echo "‚ö†Ô∏è  WARNING: Potential hardcoded API keys detected."
          echo "Review the findings above to ensure they are not sensitive."
          echo ""
          echo "Best practices:"
          echo "  - Use environment variables for API keys"
          echo "  - Use GCP Secret Manager for sensitive values"
          echo "  - Never commit .env files with real values"
          echo ""
          # Don't fail, just warn
        else
          echo "‚úÖ No hardcoded API keys detected"
        fi

