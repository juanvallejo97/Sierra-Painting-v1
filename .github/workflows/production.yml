name: Production CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: 'stable'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  FIREBASE_PROJECT_PROD: 'sierra-painting-prod'

jobs:
  setup:
    name: Setup and Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key-flutter: ${{ steps.cache-keys.outputs.flutter }}
      cache-key-npm: ${{ steps.cache-keys.outputs.npm }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get-version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "flutter=${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}" >> $GITHUB_OUTPUT
          echo "npm=${{ runner.os }}-npm-${{ hashFiles('**/functions/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ steps.cache-keys.outputs.flutter }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install Functions dependencies
        working-directory: ./functions
        run: npm ci

  lint_and_test_flutter:
    name: Lint and Test Flutter
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ needs.setup.outputs.cache-key-flutter }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter analyze
        run: flutter analyze --fatal-infos

      - name: Run Flutter tests
        run: flutter test

  lint_and_test_functions:
    name: Lint and Test Functions
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        working-directory: functions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: |
          if grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "No lint script found, skipping..."
          fi

      - name: Run tests
        run: |
          if grep -q '"test"' package.json; then
            npm test
          else
            echo "No test script found, skipping..."
          fi

  build_flutter_release:
    name: Build Flutter Release APK/AAB
    runs-on: ubuntu-latest
    needs: [setup, lint_and_test_flutter]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ needs.setup.outputs.cache-key-flutter }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK (release)
        run: flutter build apk --release

      - name: Build AAB (release)
        run: flutter build appbundle --release

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-builds-${{ needs.setup.outputs.version }}
          path: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          retention-days: 90

  deploy_indexes_production:
    name: Deploy Firestore Indexes (Production)
    runs-on: ubuntu-latest
    needs: [build_flutter_release, lint_and_test_functions]
    environment:
      name: production
      url: https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_PROD }}/overview
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - name: Deploy Firestore indexes
        run: |
          firebase deploy --only firestore:indexes --project ${{ env.FIREBASE_PROJECT_PROD }} --non-interactive

  deploy_functions_production:
    name: Deploy Functions to Production
    runs-on: ubuntu-latest
    needs: [deploy_indexes_production]
    environment:
      name: production
      url: https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_PROD }}/functions
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Functions dependencies
        working-directory: ./functions
        run: npm ci

      - name: Build Functions
        working-directory: ./functions
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ vars.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ vars.GCP_SERVICE_ACCOUNT }}

      - name: Firebase login guard check
        run: |
          chmod +x scripts/ci/firebase-login.sh
          ./scripts/ci/firebase-login.sh

      - name: Deploy to Firebase Production
        run: |
          firebase deploy --only functions,firestore:rules,storage:rules --project ${{ env.FIREBASE_PROJECT_PROD }} --non-interactive --force
        continue-on-error: false

  create_github_release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [setup, deploy_functions_production, build_flutter_release]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-builds-${{ needs.setup.outputs.version }}
          path: ./release-builds

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./release-builds/app-release.apk
            ./release-builds/app-release.aab
          generate_release_notes: true
          draft: false
          prerelease: false
          body: |
            ## Sierra Painting ${{ needs.setup.outputs.version }}

            ### üì± Mobile App Builds
            - **APK**: app-release.apk (for direct installation)
            - **AAB**: app-release.aab (for Google Play Store)

            ### üöÄ Deployment
            - Cloud Functions deployed to production
            - Firestore rules and indexes updated
            - Storage rules updated

            ### üìä Monitoring
            - [Firebase Console](https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_PROD }}/overview)
            - [Cloud Functions Logs](https://console.cloud.google.com/logs/query?project=${{ env.FIREBASE_PROJECT_PROD }})
            - [Crashlytics](https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_PROD }}/crashlytics)

            ### üìù Notes
            - Manual app store submission required for iOS
            - Monitor error rates for 24 hours post-deployment
            - See [rollout-rollback.md](https://github.com/${{ github.repository }}/blob/main/docs/rollout-rollback.md) for rollback procedures

  post_checks:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: [deploy_functions_production, create_github_release]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print monitoring links
        run: |
          echo "==================================================="
          echo "üìä Production Environment Monitoring Links"
          echo "==================================================="
          echo ""
          echo "üî• Firebase Console:"
          echo "https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_PROD }}/overview"
          echo ""
          echo "üìù Cloud Functions Logs:"
          echo "https://console.cloud.google.com/logs/query?project=${{ env.FIREBASE_PROJECT_PROD }}"
          echo ""
          echo "üí• Crashlytics Dashboard:"
          echo "https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_PROD }}/crashlytics"
          echo ""
          echo "‚ö° Performance Monitoring:"
          echo "https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_PROD }}/performance"
          echo ""
          echo "üîç Error Reporting:"
          echo "https://console.cloud.google.com/errors?project=${{ env.FIREBASE_PROJECT_PROD }}"
          echo ""
          echo "üéÆ Google Play Console:"
          echo "https://play.google.com/console"
          echo ""
          echo "üçé App Store Connect:"
          echo "https://appstoreconnect.apple.com"
          echo ""
          echo "==================================================="
          echo "üìã Post-Deployment Checklist"
          echo "==================================================="
          echo ""
          echo "TODO: Implement threshold checks"
          echo "  - [ ] Error rate < 1% (current: manual check required)"
          echo "  - [ ] P95 latency < 2s (current: manual check required)"
          echo "  - [ ] Function cold start < 5s (current: manual check required)"
          echo "  - [ ] No critical errors in last 5 minutes (current: manual check required)"
          echo ""
          echo "Manual verification steps:"
          echo "  1. Check Cloud Functions logs for errors (next 2 hours)"
          echo "  2. Monitor Crashlytics for new crashes (next 24 hours)"
          echo "  3. Test critical user flows in production app"
          echo "  4. Monitor error rate and latency metrics"
          echo "  5. Upload APK/AAB to Play Store (manual step)"
          echo "  6. Submit iOS build to App Store (manual step)"
          echo ""

      - name: Deployment status
        run: |
          if [ "${{ needs.deploy_functions_production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment completed successfully!"
            echo ""
            echo "‚ö†Ô∏è  Critical Post-Deployment Actions:"
            echo "  1. Monitor production for next 2 hours"
            echo "  2. Have rollback plan ready (see scripts/rollback/)"
            echo "  3. Upload builds to app stores (manual)"
            echo "  4. Announce release to team/users"
            echo ""
          else
            echo "‚ùå Production deployment failed!"
            echo "Check the logs above for errors."
            echo "Rollback may be required!"
            exit 1
          fi
