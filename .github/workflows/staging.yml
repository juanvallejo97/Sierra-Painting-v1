name: Staging CI/CD Pipeline

on:
  push:
    branches: [ main ]

env:
  FLUTTER_VERSION: 'stable'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'
  FIREBASE_PROJECT_STAGING: 'sierra-painting-staging'

jobs:
  setup:
    name: Setup and Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-key-flutter: ${{ steps.cache-keys.outputs.flutter }}
      cache-key-npm: ${{ steps.cache-keys.outputs.npm }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "flutter=${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}" >> $GITHUB_OUTPUT
          echo "npm=${{ runner.os }}-npm-${{ hashFiles('**/functions/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ steps.cache-keys.outputs.flutter }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Flutter dependencies
        run: flutter pub get

      - name: Install Functions dependencies
        working-directory: ./functions
        run: npm ci

  lint_and_test_flutter:
    name: Lint and Test Flutter
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ needs.setup.outputs.cache-key-flutter }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter analyze
        run: flutter analyze --fatal-infos

      - name: Run Flutter tests
        run: flutter test

  lint_and_test_functions:
    name: Lint and Test Functions
    runs-on: ubuntu-latest
    needs: setup
    defaults:
      run:
        working-directory: functions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: |
          if grep -q '"lint"' package.json; then
            npm run lint
          else
            echo "No lint script found, skipping..."
          fi

      - name: Run tests
        run: |
          if grep -q '"test"' package.json; then
            npm test
          else
            echo "No test script found, skipping..."
          fi

  build_check_flutter:
    name: Build Check Flutter
    runs-on: ubuntu-latest
    needs: [setup, lint_and_test_flutter]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build
          key: ${{ needs.setup.outputs.cache-key-flutter }}
          restore-keys: |
            ${{ runner.os }}-flutter-

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Install dependencies
        run: flutter pub get

      - name: Build APK (debug, no signing)
        run: flutter build apk --debug --dart-define=ENABLE_APP_CHECK=true

  emulator_smoke:
    name: Emulator Smoke Tests
    runs-on: ubuntu-latest
    needs: [lint_and_test_functions]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Functions dependencies
        working-directory: ./functions
        run: npm ci

      - name: Build Functions
        working-directory: ./functions
        run: npm run build

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only auth,firestore,functions,storage &
          sleep 10

      - name: Run smoke tests
        run: |
          chmod +x scripts/smoke/run.sh
          ./scripts/smoke/run.sh

      - name: Stop emulators
        if: always()
        run: |
          pkill -f firebase || true

  deploy_indexes:
    name: Deploy Firestore Indexes
    runs-on: ubuntu-latest
    needs: [build_check_flutter, emulator_smoke]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Deploy Firestore indexes
        run: |
          firebase deploy --only firestore:indexes --project ${{ env.FIREBASE_PROJECT_STAGING }} --non-interactive

  deploy_functions_staging:
    name: Deploy Functions to Staging
    runs-on: ubuntu-latest
    needs: [deploy_indexes]
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install Functions dependencies
        working-directory: ./functions
        run: npm ci

      - name: Build Functions
        working-directory: ./functions
        run: npm run build

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}

      - name: Firebase login guard check
        run: |
          chmod +x scripts/ci/firebase-login.sh
          ./scripts/ci/firebase-login.sh

      - name: Deploy to Firebase Staging
        run: |
          firebase deploy --only functions,firestore:rules,storage:rules --project ${{ env.FIREBASE_PROJECT_STAGING }} --non-interactive --force
        continue-on-error: false

  post_checks:
    name: Post-Deployment Checks
    runs-on: ubuntu-latest
    needs: [deploy_functions_staging]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Print monitoring links
        run: |
          echo "==================================================="
          echo "üìä Staging Environment Monitoring Links"
          echo "==================================================="
          echo ""
          echo "üî• Firebase Console:"
          echo "https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_STAGING }}/overview"
          echo ""
          echo "üìù Cloud Functions Logs:"
          echo "https://console.cloud.google.com/logs/query?project=${{ env.FIREBASE_PROJECT_STAGING }}"
          echo ""
          echo "üí• Crashlytics Dashboard:"
          echo "https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_STAGING }}/crashlytics"
          echo ""
          echo "‚ö° Performance Monitoring:"
          echo "https://console.firebase.google.com/project/${{ env.FIREBASE_PROJECT_STAGING }}/performance"
          echo ""
          echo "üîç Error Reporting:"
          echo "https://console.cloud.google.com/errors?project=${{ env.FIREBASE_PROJECT_STAGING }}"
          echo ""
          echo "==================================================="
          echo "üìã Post-Deployment Checklist"
          echo "==================================================="
          echo ""
          echo "TODO: Implement threshold checks"
          echo "  - [ ] Error rate < 5% (current: manual check required)"
          echo "  - [ ] P95 latency < 3s (current: manual check required)"
          echo "  - [ ] Function cold start < 5s (current: manual check required)"
          echo "  - [ ] No critical errors in last 5 minutes (current: manual check required)"
          echo ""
          echo "Manual verification steps:"
          echo "  1. Check Cloud Functions logs for errors"
          echo "  2. Verify Firestore rules deployed correctly"
          echo "  3. Test critical user flows in staging app"
          echo "  4. Monitor error rate for 15 minutes"
          echo ""

      - name: Deployment status
        run: |
          if [ "${{ needs.deploy_functions_staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment completed successfully!"
            echo "Next steps:"
            echo "  1. Verify functionality in staging environment"
            echo "  2. Run manual QA tests"
            echo "  3. Create production tag when ready: git tag v1.x.x && git push origin v1.x.x"
          else
            echo "‚ùå Staging deployment failed!"
            echo "Check the logs above for errors."
            exit 1
          fi
