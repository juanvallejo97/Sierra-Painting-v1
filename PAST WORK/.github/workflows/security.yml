name: Security - Comprehensive Scanning
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  secret-scanning:
    name: Secret Scanning (TruffleHog)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Full history for comprehensive scanning
      
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --only-verified --fail
          path: ./
      
      - name: Report results
        if: always()
        run: |
          echo "üîê TruffleHog scan completed"
          echo "This scan checks for verified secrets committed to the repository"
          echo "If secrets are found, the job will fail and PR will be blocked"
  
  rules:
    name: Firestore Rules Tests
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install root dependencies
        run: npm ci || npm install

      - name: Install test dependencies
        working-directory: firestore-tests
        run: npm ci || npm install

      - name: Run Firestore rules tests
        working-directory: firestore-tests
        run: npm test
        env:
          FIRESTORE_EMULATOR_HOST: localhost:8080
  
  validate-rules:
    name: Validate Security Rules
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
      
      - name: Validate Firestore Rules
        run: |
          if [ -f "firestore.rules" ]; then
            echo "‚úÖ Firestore rules file found"
            
            # Check for deny-by-default pattern
            if ! grep -q "allow read, write: if false" firestore.rules; then
              echo "‚ö†Ô∏è  WARNING: Default deny-all rule not found"
              echo "   Ensure rules have: match /{document=**} { allow read, write: if false; }"
            fi
            
            # Check for authentication requirements
            if ! grep -q "request.auth != null" firestore.rules; then
              echo "‚ö†Ô∏è  WARNING: No authentication checks found"
              echo "   Ensure rules check: request.auth != null"
            fi
            
            echo "‚úÖ Basic validation passed"
          else
            echo "‚ùå No firestore.rules file found"
            exit 1
          fi
      
      - name: Validate Storage Rules
        run: |
          if [ -f "storage.rules" ]; then
            echo "‚úÖ Storage rules file found"
            
            # Check for deny-by-default pattern
            if ! grep -q "allow read, write: if false" storage.rules; then
              echo "‚ö†Ô∏è  WARNING: Default deny-all rule not found in storage rules"
            fi
            
            # Check for authentication requirements
            if ! grep -q "request.auth != null" storage.rules; then
              echo "‚ö†Ô∏è  WARNING: No authentication checks found in storage rules"
            fi
            
            echo "‚úÖ Basic validation passed"
          else
            echo "‚ùå No storage.rules file found"
            exit 1
          fi

  dependency-check:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
    
      - name: Check Functions dependencies
        working-directory: functions
        run: |
          if [ -f "package.json" ]; then
            echo "üîç Checking npm dependencies for vulnerabilities"
            
            # Install dependencies
            npm ci || npm install
            
            # Run audit (moderate level)
            echo ""
            echo "Running npm audit..."
            npm audit --audit-level=moderate || {
              echo "‚ö†Ô∏è  Vulnerabilities found - review and fix with 'npm audit fix'"
              exit 1
            }
            
            echo "‚úÖ No moderate or higher vulnerabilities found"
          fi
    
      - name: Check root dependencies
        run: |
          if [ -f "package.json" ]; then
            echo "üîç Checking root npm dependencies"
            npm ci || npm install
            npm audit --audit-level=high || true
          fi
    
      - name: Verify lockfiles present
        run: |
          echo "üîç Checking for dependency lockfiles..."
          
          MISSING=0
          
          if [ ! -f "pubspec.lock" ]; then
            echo "‚ö†Ô∏è  Missing pubspec.lock for Flutter dependencies"
            MISSING=1
          fi
          
          if [ -f "functions/package.json" ] && [ ! -f "functions/package-lock.json" ]; then
            echo "‚ö†Ô∏è  Missing functions/package-lock.json"
            MISSING=1
          fi
          
          if [ -f "package.json" ] && [ ! -f "package-lock.json" ]; then
            echo "‚ö†Ô∏è  Missing root package-lock.json"
            MISSING=1
          fi
          
          if [ $MISSING -eq 1 ]; then
            echo ""
            echo "‚ùå Lockfiles missing - these are required for reproducible builds"
            exit 1
          fi
          
          echo "‚úÖ All lockfiles present"

  secret-scanning-legacy:
    name: Additional Secret Checks
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
    - uses: actions/checkout@v5
    
    - name: Check GitHub Secret Scanning status
      run: |
        echo "=========================================="
        echo "üîê Secret Scanning Status"
        echo "=========================================="
        echo ""
        echo "‚ö†Ô∏è  REMINDER: Ensure GitHub Secret Scanning is enabled"
        echo ""
        echo "Repository settings: https://github.com/${{ github.repository }}/settings/security_analysis"
        echo ""
        echo "Required security features:"
        echo "  - ‚úÖ Secret scanning (detects committed secrets)"
        echo "  - ‚úÖ Push protection (blocks secret commits)"
        echo "  - ‚úÖ Dependency graph"
        echo "  - ‚úÖ Dependabot alerts"
        echo "  - ‚úÖ Dependabot security updates"
        echo ""
        echo "Secret types to monitor:"
        echo "  - Google API keys"
        echo "  - Google Cloud Platform service account keys"
        echo "  - Firebase service account keys"
        echo "  - Private keys"
        echo "  - OAuth tokens"
        echo ""
        echo "For more info: https://docs.github.com/en/code-security/secret-scanning"
        echo ""
    
    - name: Verify no secrets in environment files
      run: |
        echo "üîç Checking for committed .env files..."
        
        # Check for .env files (should be in .gitignore)
        if find . -name ".env" -o -name ".env.*" | grep -v ".env.example" | grep -v "node_modules" | grep -v ".git"; then
          echo "‚ùå WARNING: Found .env files in repository!"
          echo "These files may contain secrets and should not be committed."
          echo ""
          echo "Add to .gitignore:"
          echo "  .env"
          echo "  .env.*"
          echo "  !.env.example"
          exit 1
        else
          echo "‚úÖ No .env files found (good!)"
        fi
    
    - name: Check for API keys in code
      run: |
        echo "üîç Checking for hardcoded API keys..."
        
        # Basic pattern matching for common API key formats
        FOUND=0
        
        # Check for Firebase API keys in unexpected places
        if grep -r "AIza[0-9A-Za-z_-]{35}" --include="*.dart" --include="*.ts" --include="*.js" --include="*.sh" . 2>/dev/null | grep -v "NEXT_PUBLIC" | grep -v "// Example:" | grep -v ".git"; then
          echo "‚ö†Ô∏è  Found Firebase API key pattern in code!"
          FOUND=1
        fi
        
        if [ $FOUND -eq 1 ]; then
          echo ""
          echo "‚ö†Ô∏è  WARNING: Potential hardcoded API keys detected."
          echo "Review the findings above to ensure they are not sensitive."
          echo ""
          echo "Best practices:"
          echo "  - Use environment variables for API keys"
          echo "  - Use GCP Secret Manager for sensitive values"
          echo "  - Never commit .env files with real values"
          echo ""
          # Don't fail, just warn
        else
          echo "‚úÖ No hardcoded API keys detected"
        fi

