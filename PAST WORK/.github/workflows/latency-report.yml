name: Latency Report

on:
  push:
    branches:
      - main
      - staging
  pull_request:
    branches:
      - main
      - staging
  schedule:
    # Run daily at 6am UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      samples:
        description: 'Number of samples to collect'
        required: false
        default: '20'

jobs:
  latency-probe:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Install functions dependencies
        run: npm --prefix functions install

      - name: Install latency probe dependencies
        run: |
          cd tools/perf
          npm init -y
          npm install firebase-admin uuid ts-node typescript @types/node

      - name: Start Firebase Emulators
        run: |
          firebase emulators:start --only firestore,auth &
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV

          # Wait for emulators to be ready
          for i in {1..30}; do
            if curl -s http://localhost:8080 > /dev/null 2>&1; then
              echo "‚úì Emulators ready"
              break
            fi
            echo "Waiting for emulators... ($i/30)"
            sleep 2
          done

      - name: Run Latency Probe
        id: latency_probe
        run: |
          cd tools/perf
          SAMPLES="${{ github.event.inputs.samples || '20' }}"
          npx ts-node latency_probe.ts --env=emulator --samples=$SAMPLES | tee latency_results.log
        continue-on-error: true

      - name: Stop Emulators
        if: always()
        run: |
          if [ ! -z "$EMULATOR_PID" ]; then
            kill $EMULATOR_PID 2>/dev/null || true
          fi
          pkill -f "firebase.*emulators" || true

      - name: Extract JSON Results
        if: always()
        run: |
          cd tools/perf
          # Extract JSON output from log (between last "JSON Output:" and end)
          sed -n '/JSON Output:/,$p' latency_results.log | tail -n +3 > latency_results.json
          cat latency_results.json

      - name: Upload Latency Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: latency-results-${{ github.run_number }}
          path: tools/perf/latency_results.json
          retention-days: 30

      - name: Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const results = JSON.parse(fs.readFileSync('tools/perf/latency_results.json', 'utf8'));

              const status = results.sloStatus === 'PASS' ? '‚úÖ PASS' : '‚ùå FAIL';
              const clockInStatus = results.clockIn.p95 <= 2000 ? '‚úÖ' : '‚ùå';
              const clockOutStatus = results.clockOut.p95 <= 1500 ? '‚úÖ' : '‚ùå';

              let body = `## üéØ Latency Report\n\n`;
              body += `**SLO Status:** ${status}\n\n`;
              body += `### Results\n\n`;
              body += `| Operation | p50 | p95 | p99 | SLO (p95) | Status |\n`;
              body += `|-----------|-----|-----|-----|-----------|--------|\n`;
              body += `| clockIn   | ${results.clockIn.p50}ms | ${results.clockIn.p95}ms | ${results.clockIn.p99}ms | <2000ms | ${clockInStatus} |\n`;
              body += `| clockOut  | ${results.clockOut.p50}ms | ${results.clockOut.p95}ms | ${results.clockOut.p99}ms | <1500ms | ${clockOutStatus} |\n`;

              if (results.sloViolations && results.sloViolations.length > 0) {
                body += `\n### ‚ö†Ô∏è SLO Violations\n\n`;
                for (const violation of results.sloViolations) {
                  body += `- ${violation}\n`;
                }
              }

              body += `\n**Samples:** ${results.clockIn.samples}`;
              body += `\n**Environment:** ${results.environment}`;
              body += `\n**Timestamp:** ${results.timestamp}`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.error('Failed to post comment:', error);
            }

      - name: Check SLO Status
        if: always()
        run: |
          cd tools/perf
          if grep -q '"sloStatus": "FAIL"' latency_results.json; then
            echo "‚ùå SLO VIOLATED"
            cat latency_results.json
            exit 1
          else
            echo "‚úÖ SLO MET"
            exit 0
          fi
