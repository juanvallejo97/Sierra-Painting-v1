rules_version = '2';

/**
 * Firestore Security Rules for Sierra Painting
 * 
 * SECURITY POSTURE:
 * - Deny-by-default: All access denied unless explicitly allowed
 * - Authentication required: All operations require authenticated user
 * - Role-based access control: Admin, crew_lead, crew roles
 * - Organization scoping: Multi-tenant data isolation via orgId
 * - App Check: Enforced at Cloud Functions level; available for Firestore rules
 * 
 * APP CHECK NOTE:
 * - All callable Cloud Functions enforce App Check with consumeAppCheckToken
 * - Direct Firestore client access can optionally check App Check via hasValidAppCheck()
 * - Current rules rely on authentication + role checks; App Check adds anti-abuse layer
 */

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isCrewLead() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'crewLead';
    }
    
    // App Check validation helper (optional enforcement at Firestore level)
    // Primary enforcement is at Cloud Functions level
    function hasValidAppCheck() {
      return request.app.appCheck.token.aud[0] == request.app.projectId;
    }
    
    // Organization scoping helper - check if user belongs to the resource's org
    function belongsToOrg(resourceData) {
      return isAuthenticated() && 
             resourceData.orgId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgId;
    }
    
    // Deny by default - must explicitly grant access
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection
    match /users/{userId} {
      // Users can read their own profile
      allow read: if isOwner(userId);
      // Users can create their profile on signup
      allow create: if isOwner(userId);
      // Users can update their own profile (except role and orgId)
      allow update: if isOwner(userId) && 
                       (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'orgId']));
      // Only admins can delete users
      allow delete: if isAdmin();
      
      // Admin can read/write all users
      allow read, write: if isAdmin();
    }
    
    // Jobs collection
    match /jobs/{jobId} {
      // Users can read jobs in their org that they're assigned to
      allow read: if isAuthenticated() && 
                     (belongsToOrg(resource.data) && 
                      (resource.data.crewIds.hasAny([request.auth.uid]) || isAdmin()));
      // Only admins can create/update/delete jobs
      allow create, update, delete: if isAdmin();
      
      // Time entries subcollection (B1, B2)
      match /timeEntries/{entryId} {
        // Users can create their own entries (B1)
        allow create: if isAuthenticated()
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.orgId == 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.orgId;
        
        // Users can read their own entries OR admins can read all
        allow read: if isAuthenticated() 
          && (request.auth.uid == resource.data.userId 
              || isAdmin());
        
        // No client updates (clock-out is via callable function)
        allow update, delete: if false;
      }
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Authenticated users can read projects in their org
      allow read: if isAuthenticated() && (belongsToOrg(resource.data) || isAdmin());
      // Only admins can create projects
      allow create: if isAdmin();
      // Only admins can update projects
      allow update: if isAdmin();
      // Only admins can delete projects
      allow delete: if isAdmin();
    }
    
    // Payments collection - READ-ONLY to clients (audit trail)
    match /payments/{paymentId} {
      // Users can read their own payments
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      // Admins can read all payments
      allow read: if isAdmin();
      // NO client writes - only server-side via Cloud Functions
      allow create, update, delete: if false;
      
      // Audit log subcollection - READ-ONLY to admins
      match /audit/{auditId} {
        allow read: if isAdmin();
        allow write: if false; // Audit logs are write-only via server
      }
    }
    
    // Invoices collection
    match /invoices/{invoiceId} {
      // Users can read their own invoices
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      // Admins can read all invoices
      allow read: if isAdmin();
      
      // Only admins can create invoices
      allow create: if isAdmin();
      
      // Block client writes that include sensitive payment fields
      // These fields can only be set server-side via markPaymentPaid function
      // RISK-SEC-002 mitigation: Prevent client tampering with invoice amounts
      allow update: if isAdmin() && 
                       !request.resource.data.diff(resource.data).affectedKeys()
                         .hasAny(['paid', 'paidAt', 'total', 'amount']);
      
      // Invoices cannot be deleted (audit trail preservation)
      allow delete: if false;
    }
    
    // Estimates collection
    match /estimates/{estimateId} {
      allow read: if isAuthenticated() && (belongsToOrg(resource.data) || isAdmin());
      allow create, update: if isAdmin();
      allow delete: if false;
    }
    
    // Leads collection (D1)
    match /leads/{leadId} {
      // Admins can read all leads
      allow read: if isAdmin();
      // NO client writes - only via callable function with App Check
      allow create, update, delete: if false;
    }
    
    // Activity logs collection (E3) - audit trail
    match /activity_logs/{logId} {
      // Only admins can read activity logs
      allow read: if isAdmin();
      // NO client writes - only server-side
      allow write: if false;
    }
    
    // Idempotency collection (ADR-006)
    match /idempotency/{key} {
      // Only admins can read (for debugging)
      allow read: if isAdmin();
      // NO client writes - only server-side
      allow write: if false;
    }
  }
}
