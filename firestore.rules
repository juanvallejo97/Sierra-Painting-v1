rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---- helpers -----------------------------------------------------------
    function authed() {
      return request.auth != null;
    }

    // Return company_id claim or null
    function claimCompany() {
      return authed() && request.auth.token.company_id != null
        ? request.auth.token.company_id
        : null;
    }

    // Check the authenticated user's company matches the path
    function isCompany(companyId) {
      return claimCompany() == companyId;
    }

    // Role checks: Uses custom claims from Firebase Auth tokens
    // Custom claims should be set via setUserRole Cloud Function
    // This eliminates Firestore reads and improves performance
    function hasRole(role) {
      return authed() && request.auth.token.role == role;
    }

    function hasAnyRole(roles) {
      return authed() &&
             request.auth.token.role != null &&
             request.auth.token.role in roles;
    }

    // Check if user belongs to a specific company (via custom claims)
    function belongsToCompany(companyId) {
      return authed() && request.auth.token.companyId == companyId;
    }

    function isOwner() {
      return authed() && resource.data.ownerId == request.auth.uid;
    }

    // Only allow specific fields to change on self-edits
    function willOnlyChange(allowedKeys) {
      return request.resource.data.diff(resource.data).changedKeys().hasOnly(allowedKeys);
    }

    // ---- company-scoped documents -----------------------------------------
    match /companies/{companyId} {
      // company document itself
      allow read: if authed() && isCompany(companyId);

      // all subcollections under a company (e.g., projects, jobs, estimates, invoicesâ€¦)
      match /{collection}/{docId} {
        // Everyone in the company can read
        allow read: if authed() && isCompany(companyId);

        // Creates: staff/admin OR owner creating their own doc
        allow create: if authed() && isCompany(companyId) && (
          hasAnyRole(["admin", "manager", "staff"]) ||
          request.resource.data.ownerId == request.auth.uid
        );

        // Updates/deletes: admin/manager OR owner with limited self fields
        allow update, delete: if authed() && isCompany(companyId) && (
          hasAnyRole(["admin", "manager"]) ||
          (isOwner() && willOnlyChange(["title","notes","status","images","updatedAt","hours"]))
        );
      }
    }

    // ---- default deny ------------------------------------------------------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
