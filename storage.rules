rules_version = '2';

/**
 * Firebase Storage Security Rules for Sierra Painting
 * 
 * SECURITY POSTURE:
 * - Deny-by-default: All access denied unless explicitly allowed
 * - Authentication required: No anonymous access to any files
 * - Role-based access: Admins have broader permissions
 * - File type validation: Only allowed types (images, PDFs)
 * - Size limits: Max 10MB per file
 * - App Check: Enforced at Cloud Functions level for uploads via functions
 * 
 * APP CHECK NOTE:
 * - Cloud Functions that upload files (e.g., createEstimatePdf) enforce App Check
 * - Direct client uploads go through these rules (auth + role checks)
 * - App Check can be added to Storage rules if needed for additional protection
 * 
 * PERFORMANCE NOTES:
 * - Firestore lookups in rules count toward read quota
 * - Cache isAdmin() result when possible
 * - Use minimal path depth for faster matching
 * 
 * INVARIANTS:
 * - All writes must be authenticated
 * - Profile images: user can only write their own
 * - Project/invoice files: admin-only writes
 * - Generated PDFs: Cloud Functions write directly (use Admin SDK)
 */

service firebase.storage {
  match /b/{bucket}/o {
    
    // ============================================================
    // HELPER FUNCTIONS
    // ============================================================
    
    /**
     * Check if request is from an authenticated user
     */
    function isAuthenticated() {
      return request.auth != null;
    }
    
    /**
     * Check if authenticated user is the resource owner
     */
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    /**
     * Check if authenticated user has admin role via custom claims
     * Uses custom claims to avoid Firestore quota consumption
     * Custom claims should be set when user role is assigned/updated
     */
    function isAdmin() {
      return isAuthenticated() &&
             request.auth.token.role == 'admin';
    }

    /**
     * DEPRECATED: Legacy Firestore-based admin check
     * WARNING: Each call consumes Firestore read quota
     * Use isAdmin() instead which checks custom claims
     */
    function isAdminLegacy() {
      return isAuthenticated() &&
             firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    /**
     * Validate file is an image
     */
    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*');
    }
    
    /**
     * Validate file is a PDF
     */
    function isValidPdfFile() {
      return request.resource.contentType == 'application/pdf';
    }
    
    /**
     * Enforce maximum file size of 10MB
     */
    function isUnder10MB() {
      return request.resource.size < 10 * 1024 * 1024;
    }
    
    // ============================================================
    // DENY BY DEFAULT
    // ============================================================
    
    match /{allPaths=**} {
      allow read, write: if false;
    }
    
    // ============================================================
    // USER PROFILE IMAGES
    // Path: /users/{userId}/profile/{imageId}
    // Read: Any authenticated user
    // Write: User can upload their own profile image only
    // ============================================================
    
    match /users/{userId}/profile/{imageId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) && 
                      isValidImageFile() && 
                      isUnder10MB();
    }
    
    // ============================================================
    // PROJECT IMAGES (Before/After Photos)
    // Path: /projects/{projectId}/images/{imageId}
    // Read: Any authenticated user (for portfolio/gallery)
    // Write: Admin only
    // ============================================================
    
    match /projects/{projectId}/images/{imageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && 
                      isValidImageFile() && 
                      isUnder10MB();
    }
    
    // ============================================================
    // ESTIMATE PDFs (Generated Server-Side)
    // Path: /estimates/{estimateId}/{filename}
    // Read: Authenticated users (org-scoped via signed URLs)
    // Write: Admin only (but Cloud Functions use Admin SDK directly)
    // ============================================================
    
    match /estimates/{estimateId}/{filename} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && 
                      isValidPdfFile() && 
                      isUnder10MB();
    }
    
    // ============================================================
    // INVOICE PDFs (Generated Server-Side)
    // Path: /invoices/{invoiceId}/{filename}
    // Read: Authenticated users (org-scoped via signed URLs)
    // Write: Admin only (but Cloud Functions use Admin SDK directly)
    // ============================================================
    
    match /invoices/{invoiceId}/{filename} {
      allow read: if isAuthenticated();
      allow write: if isAdmin() && 
                      isValidPdfFile() && 
                      isUnder10MB();
    }
    
    // ============================================================
    // JOB SITE PHOTOS (Crew Uploads)
    // Path: /jobs/{jobId}/photos/{photoId}
    // Read: Authenticated users in the same org
    // Write: Crew members assigned to the job OR admins
    // ============================================================

    match /jobs/{jobId}/photos/{photoId} {
      allow read: if isAuthenticated();

      // Allow writes if:
      // 1. User is an admin (can upload to any job), OR
      // 2. User is assigned to this specific job
      allow write: if isAuthenticated() &&
                      isValidImageFile() &&
                      isUnder10MB() &&
                      (isAdmin() || isAssignedToJob(jobId));
    }

    /**
     * Check if authenticated user is assigned to a specific job
     * Validates crew assignment via Firestore lookup
     * WARNING: This consumes Firestore read quota - consider caching job assignments
     * in custom claims for high-volume scenarios
     */
    function isAssignedToJob(jobId) {
      let job = firestore.get(/databases/(default)/documents/jobs/$(jobId));
      return job.data.assignedCrew != null &&
             request.auth.uid in job.data.assignedCrew;
    }
  }
}
