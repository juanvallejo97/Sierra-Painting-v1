#!/bin/bash
# Pre-commit hook for Sierra Painting
# Runs linting, formatting, and security checks before commit

set -e

echo "üîç Running pre-commit checks..."

# ============================================================
# SECRET SCANNING - Prevent committing sensitive credentials
# ============================================================
echo "üîê Scanning for secrets..."

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -n "$STAGED_FILES" ]; then
    SECRETS_FOUND=0
    
    # Check for service account JSON files
    if echo "$STAGED_FILES" | grep -E '\-service\-account.*\.json$|firebase\-adminsdk.*\.json$|credentials\.json$' > /dev/null; then
        echo "‚ùå ERROR: Service account JSON file detected!"
        echo "   These files must NEVER be committed."
        SECRETS_FOUND=1
    fi
    
    # Scan staged files for secret patterns
    for file in $STAGED_FILES; do
        # Skip binary files and certain paths
        if [[ ! -f "$file" ]] || file "$file" | grep -q "binary" || [[ "$file" == *"node_modules"* ]]; then
            continue
        fi
        
        # Check for private keys
        if git show ":$file" | grep -q "BEGIN PRIVATE KEY\|BEGIN RSA PRIVATE KEY\|BEGIN OPENSSH PRIVATE KEY"; then
            echo "‚ùå ERROR: Private key detected in $file"
            SECRETS_FOUND=1
        fi
        
        # Check for common secret patterns (more specific to avoid false positives)
        if git show ":$file" | grep -qE '"private_key_id"|"private_key".*"BEGIN|"type".*"service_account"'; then
            echo "‚ùå ERROR: Service account pattern detected in $file"
            SECRETS_FOUND=1
        fi
        
        # Check for hardcoded credentials (conservative patterns)
        if git show ":$file" | grep -qE 'password\s*=\s*["\x27][^"\x27]{8,}["\x27]|api[_-]?key\s*=\s*["\x27][A-Za-z0-9]{20,}["\x27]' | grep -v "example" | grep -v "REDACTED" | grep -v "YOUR_"; then
            echo "‚ö†Ô∏è  WARNING: Potential hardcoded credential in $file"
            echo "   Review to ensure this is not a real secret."
            # Don't fail on this, just warn
        fi
    done
    
    if [ $SECRETS_FOUND -eq 1 ]; then
        echo ""
        echo "üö´ Commit blocked: Secrets detected!"
        echo ""
        echo "Action required:"
        echo "  1. Remove the secret from staged files"
        echo "  2. If already committed, follow secret rotation procedure in SECURITY.md"
        echo "  3. Use environment variables or GCP Secret Manager instead"
        echo ""
        exit 1
    fi
    
    echo "‚úÖ No secrets detected"
fi

# Check if Flutter is available
if ! command -v flutter &> /dev/null; then
    echo "‚ö†Ô∏è  Flutter not found, skipping Flutter checks"
else
    # Check for Dart formatting
    echo "üìù Checking Dart formatting..."
    if ! dart format --output=none --set-exit-if-changed lib/ test/ 2>/dev/null; then
        echo "‚ùå Dart formatting issues found. Run: dart format ."
        exit 1
    fi
    
    # Run Flutter analyzer
    echo "üî¨ Running Flutter analyzer..."
    if ! flutter analyze --no-fatal-infos 2>/dev/null; then
        echo "‚ùå Flutter analyzer found issues"
        exit 1
    fi
fi

# Check if Node.js is available for Functions
if [ -d "functions" ] && command -v npm &> /dev/null; then
    echo "üîç Checking Cloud Functions..."
    cd functions
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        echo "‚ö†Ô∏è  Node modules not installed, skipping ESLint"
    else
        # Run TypeScript linter
        if [ -f "package.json" ] && grep -q "lint" package.json; then
            echo "üìù Running ESLint..."
            if ! npm run lint -- --quiet 2>/dev/null; then
                echo "‚ùå ESLint found issues. Run: cd functions && npm run lint"
                cd ..
                exit 1
            fi
        fi
    fi
    
    cd ..
fi

echo "‚úÖ All pre-commit checks passed!"
